/**
 * Create pdkdf2 digest.
 * @function pdkdf2Digest
 * @param {string} text - Text to digest.
 * @param {string} salt - Digest salt.
 * @param {object} [options] - Optional settings.
 * @param {number} [options.iterations=100] - Iteration count.
 * @param {number} [options.length=84] - Key length.
 * @param {string} [options.format='base64']
 * @returns {Promise}
 */

'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var co = require('co');
var crypto = require('crypto');

var _require = require('../constants'),
    DEFAULT_ITERATIONS = _require.DEFAULT_ITERATIONS,
    DEFAULT_LENGTH = _require.DEFAULT_LENGTH,
    DEFAULT_FORMAT = _require.DEFAULT_FORMAT;

var DIGEST = 'sha512';

/** @lends pdkdf2Digest */
function pdkdf2Digest(text, salt) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!salt) {
    throw new Error('Salt is required.');
  }
  var iterations = options.iterations || DEFAULT_ITERATIONS;
  var length = options.length || DEFAULT_LENGTH;
  var format = options.format || DEFAULT_FORMAT;
  return co(_regenerator2.default.mark(function _callee() {
    var buffer, result;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return new _promise2.default(function (resolve, reject) {
              return crypto.pbkdf2(text, salt, iterations, length, DIGEST, function (err, buffer) {
                return err ? reject(err) : resolve(buffer);
              });
            });

          case 2:
            buffer = _context.sent;
            result = Buffer(buffer, 'binary').toString(format);
            return _context.abrupt('return', result);

          case 5:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
}

pdkdf2Digest.sync = function (text, salt) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (!salt) {
    throw new Error('Salt is required.');
  }
  var iterations = options.iterations || DEFAULT_ITERATIONS;
  var length = options.length || DEFAULT_LENGTH;
  var format = options.format || DEFAULT_FORMAT;
  var buffer = crypto.pbkdf2Sync(text, salt, iterations, length, DIGEST);
  return Buffer(buffer, 'binary').toString(format);
};

module.exports = pdkdf2Digest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBka2RmMl9kaWdlc3QuanMiXSwibmFtZXMiOlsiY28iLCJyZXF1aXJlIiwiY3J5cHRvIiwiREVGQVVMVF9JVEVSQVRJT05TIiwiREVGQVVMVF9MRU5HVEgiLCJERUZBVUxUX0ZPUk1BVCIsIkRJR0VTVCIsInBka2RmMkRpZ2VzdCIsInRleHQiLCJzYWx0Iiwib3B0aW9ucyIsIkVycm9yIiwiaXRlcmF0aW9ucyIsImxlbmd0aCIsImZvcm1hdCIsInJlc29sdmUiLCJyZWplY3QiLCJwYmtkZjIiLCJlcnIiLCJidWZmZXIiLCJyZXN1bHQiLCJCdWZmZXIiLCJ0b1N0cmluZyIsInN5bmMiLCJwYmtkZjJTeW5jIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQVlBOzs7Ozs7Ozs7Ozs7QUFFQSxJQUFNQSxLQUFLQyxRQUFRLElBQVIsQ0FBWDtBQUNBLElBQU1DLFNBQVNELFFBQVEsUUFBUixDQUFmOztlQUtJQSxRQUFRLGNBQVIsQztJQUhGRSxrQixZQUFBQSxrQjtJQUNBQyxjLFlBQUFBLGM7SUFDQUMsYyxZQUFBQSxjOztBQUdGLElBQU1DLFNBQVMsUUFBZjs7QUFFQTtBQUNBLFNBQVNDLFlBQVQsQ0FBdUJDLElBQXZCLEVBQTZCQyxJQUE3QixFQUFpRDtBQUFBLE1BQWRDLE9BQWMsdUVBQUosRUFBSTs7QUFDL0MsTUFBSSxDQUFDRCxJQUFMLEVBQVc7QUFDVCxVQUFNLElBQUlFLEtBQUosQ0FBVSxtQkFBVixDQUFOO0FBQ0Q7QUFDRCxNQUFJQyxhQUFhRixRQUFRRSxVQUFSLElBQXNCVCxrQkFBdkM7QUFDQSxNQUFJVSxTQUFTSCxRQUFRRyxNQUFSLElBQWtCVCxjQUEvQjtBQUNBLE1BQUlVLFNBQVNKLFFBQVFJLE1BQVIsSUFBa0JULGNBQS9CO0FBQ0EsU0FBT0wsOEJBQUc7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxtQkFDVyxzQkFBWSxVQUFDZSxPQUFELEVBQVVDLE1BQVY7QUFBQSxxQkFDN0JkLE9BQU9lLE1BQVAsQ0FBY1QsSUFBZCxFQUFvQkMsSUFBcEIsRUFBMEJHLFVBQTFCLEVBQXNDQyxNQUF0QyxFQUE4Q1AsTUFBOUMsRUFBc0QsVUFBQ1ksR0FBRCxFQUFNQyxNQUFOO0FBQUEsdUJBQ3BERCxNQUFNRixPQUFPRSxHQUFQLENBQU4sR0FBb0JILFFBQVFJLE1BQVIsQ0FEZ0M7QUFBQSxlQUF0RCxDQUQ2QjtBQUFBLGFBQVosQ0FEWDs7QUFBQTtBQUNKQSxrQkFESTtBQU1KQyxrQkFOSSxHQU1LQyxPQUFPRixNQUFQLEVBQWUsUUFBZixFQUF5QkcsUUFBekIsQ0FBa0NSLE1BQWxDLENBTkw7QUFBQSw2Q0FPRE0sTUFQQzs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxHQUFILEVBQVA7QUFTRDs7QUFFRGIsYUFBYWdCLElBQWIsR0FBb0IsVUFBVWYsSUFBVixFQUFnQkMsSUFBaEIsRUFBb0M7QUFBQSxNQUFkQyxPQUFjLHVFQUFKLEVBQUk7O0FBQ3RELE1BQUksQ0FBQ0QsSUFBTCxFQUFXO0FBQ1QsVUFBTSxJQUFJRSxLQUFKLENBQVUsbUJBQVYsQ0FBTjtBQUNEO0FBQ0QsTUFBSUMsYUFBYUYsUUFBUUUsVUFBUixJQUFzQlQsa0JBQXZDO0FBQ0EsTUFBSVUsU0FBU0gsUUFBUUcsTUFBUixJQUFrQlQsY0FBL0I7QUFDQSxNQUFJVSxTQUFTSixRQUFRSSxNQUFSLElBQWtCVCxjQUEvQjtBQUNBLE1BQUljLFNBQVNqQixPQUFPc0IsVUFBUCxDQUFrQmhCLElBQWxCLEVBQXdCQyxJQUF4QixFQUE4QkcsVUFBOUIsRUFBMENDLE1BQTFDLEVBQWtEUCxNQUFsRCxDQUFiO0FBQ0EsU0FBT2UsT0FBT0YsTUFBUCxFQUFlLFFBQWYsRUFBeUJHLFFBQXpCLENBQWtDUixNQUFsQyxDQUFQO0FBQ0QsQ0FURDs7QUFXQVcsT0FBT0MsT0FBUCxHQUFpQm5CLFlBQWpCIiwiZmlsZSI6InBka2RmMl9kaWdlc3QuanMiLCJzb3VyY2VSb290IjoibGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGUgcGRrZGYyIGRpZ2VzdC5cbiAqIEBmdW5jdGlvbiBwZGtkZjJEaWdlc3RcbiAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gVGV4dCB0byBkaWdlc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc2FsdCAtIERpZ2VzdCBzYWx0LlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIE9wdGlvbmFsIHNldHRpbmdzLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLml0ZXJhdGlvbnM9MTAwXSAtIEl0ZXJhdGlvbiBjb3VudC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5sZW5ndGg9ODRdIC0gS2V5IGxlbmd0aC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5mb3JtYXQ9J2Jhc2U2NCddXG4gKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgY28gPSByZXF1aXJlKCdjbycpXG5jb25zdCBjcnlwdG8gPSByZXF1aXJlKCdjcnlwdG8nKVxuY29uc3Qge1xuICBERUZBVUxUX0lURVJBVElPTlMsXG4gIERFRkFVTFRfTEVOR1RILFxuICBERUZBVUxUX0ZPUk1BVFxufSA9IHJlcXVpcmUoJy4uL2NvbnN0YW50cycpO1xuXG5jb25zdCBESUdFU1QgPSAnc2hhNTEyJ1xuXG4vKiogQGxlbmRzIHBka2RmMkRpZ2VzdCAqL1xuZnVuY3Rpb24gcGRrZGYyRGlnZXN0ICh0ZXh0LCBzYWx0LCBvcHRpb25zID0ge30pIHtcbiAgaWYgKCFzYWx0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdTYWx0IGlzIHJlcXVpcmVkLicpXG4gIH1cbiAgbGV0IGl0ZXJhdGlvbnMgPSBvcHRpb25zLml0ZXJhdGlvbnMgfHwgREVGQVVMVF9JVEVSQVRJT05TXG4gIGxldCBsZW5ndGggPSBvcHRpb25zLmxlbmd0aCB8fCBERUZBVUxUX0xFTkdUSFxuICBsZXQgZm9ybWF0ID0gb3B0aW9ucy5mb3JtYXQgfHwgREVGQVVMVF9GT1JNQVRcbiAgcmV0dXJuIGNvKGZ1bmN0aW9uICogKCkge1xuICAgIGxldCBidWZmZXIgPSB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgICAgY3J5cHRvLnBia2RmMih0ZXh0LCBzYWx0LCBpdGVyYXRpb25zLCBsZW5ndGgsIERJR0VTVCwgKGVyciwgYnVmZmVyKSA9PlxuICAgICAgICBlcnIgPyByZWplY3QoZXJyKSA6IHJlc29sdmUoYnVmZmVyKVxuICAgICAgKVxuICAgIClcbiAgICBsZXQgcmVzdWx0ID0gQnVmZmVyKGJ1ZmZlciwgJ2JpbmFyeScpLnRvU3RyaW5nKGZvcm1hdClcbiAgICByZXR1cm4gcmVzdWx0XG4gIH0pXG59XG5cbnBka2RmMkRpZ2VzdC5zeW5jID0gZnVuY3Rpb24gKHRleHQsIHNhbHQsIG9wdGlvbnMgPSB7fSkge1xuICBpZiAoIXNhbHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1NhbHQgaXMgcmVxdWlyZWQuJylcbiAgfVxuICBsZXQgaXRlcmF0aW9ucyA9IG9wdGlvbnMuaXRlcmF0aW9ucyB8fCBERUZBVUxUX0lURVJBVElPTlNcbiAgbGV0IGxlbmd0aCA9IG9wdGlvbnMubGVuZ3RoIHx8IERFRkFVTFRfTEVOR1RIXG4gIGxldCBmb3JtYXQgPSBvcHRpb25zLmZvcm1hdCB8fCBERUZBVUxUX0ZPUk1BVFxuICBsZXQgYnVmZmVyID0gY3J5cHRvLnBia2RmMlN5bmModGV4dCwgc2FsdCwgaXRlcmF0aW9ucywgbGVuZ3RoLCBESUdFU1QpXG4gIHJldHVybiBCdWZmZXIoYnVmZmVyLCAnYmluYXJ5JykudG9TdHJpbmcoZm9ybWF0KVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHBka2RmMkRpZ2VzdDsiXX0=