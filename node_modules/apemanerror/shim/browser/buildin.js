/**
 * Buildin error creators
 * @module buildin
 */
'use strict';

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var apemanerror = require('./apemanerror');

module.exports = (0, _assign2.default)(exports, {},
// Basic errors
{
  valueMissingError: function valueMissingError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Value required';
    return apemanerror(msg, {
      name: 'ValueMissingError',
      status: 400
    });
  },
  valueInvalidError: function valueInvalidError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Value invalid';
    return apemanerror(msg, {
      name: 'valueInvalidError',
      status: 400
    });
  }
},
// Sign errors
{
  signupProveError: function signupProveError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Provision Failed';
    return apemanerror(msg, {
      name: 'SignupProveError',
      status: 400
    });
  },

  signinFailError: function signinFailError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Signin Failed';
    return apemanerror(msg, {
      name: 'SigninFail',
      status: 400
    });
  },

  signinRequiredError: function signinRequiredError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Signin required';
    return apemanerror(msg, {
      name: 'SigninRequiredError',
      status: 401
    });
  },

  signInvalidError: function signInvalidError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'User not registered for sign';
    return apemanerror(msg, {
      name: 'SignInvalidError',
      status: 403
    });
  }
},
// Verify errors
{
  verifyNotFoundError: function verifyNotFoundError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'User not found for the given email';
    return apemanerror(msg, {
      name: 'VerifyNotFoundError',
      status: 400
    });
  },

  verifyTokenWrongError: function verifyTokenWrongError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Token is wrong';
    return apemanerror(msg, {
      name: 'VerifyTokenWrongError',
      status: 400
    });
  },

  verifyTokenExpiredError: function verifyTokenExpiredError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Token is expired';
    return apemanerror(msg, {
      name: 'VerifyTokenExpiredError',
      status: 400
    });
  }
},
// Recover errors
{
  recoverNotFoundError: function recoverNotFoundError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'User not found for the given email';
    return apemanerror(msg, {
      name: 'RecoverNotFoundError',
      status: 400
    });
  },

  recoverTokenWrongError: function recoverTokenWrongError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Token is wrong';
    return apemanerror(msg, {
      name: 'RecoverTokenWrongError',
      status: 400
    });
  },

  recoverTokenExpiredError: function recoverTokenExpiredError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Token is expired';
    return apemanerror(msg, {
      name: 'RecoverTokenExpiredError',
      status: 400
    });
  }
},
// Auth errors
{
  notAllowedError: function notAllowedError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Not allowed here';
    return apemanerror(msg, {
      name: 'NotAllowedError',
      status: 403
    });
  }
},
// Resource errors
{
  notFoundError: function notFoundError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Not found';
    return apemanerror(msg, {
      name: 'NotFound',
      status: 404
    });
  }
},
// Authorize errors
{
  notAuthorizedError: function notAuthorizedError() {
    var msg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Not authroized';
    return apemanerror(msg, {
      name: 'NotAuthorized',
      status: 402
    });
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJ1aWxkaW4uanMiXSwibmFtZXMiOlsiYXBlbWFuZXJyb3IiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsInZhbHVlTWlzc2luZ0Vycm9yIiwibXNnIiwibmFtZSIsInN0YXR1cyIsInZhbHVlSW52YWxpZEVycm9yIiwic2lnbnVwUHJvdmVFcnJvciIsInNpZ25pbkZhaWxFcnJvciIsInNpZ25pblJlcXVpcmVkRXJyb3IiLCJzaWduSW52YWxpZEVycm9yIiwidmVyaWZ5Tm90Rm91bmRFcnJvciIsInZlcmlmeVRva2VuV3JvbmdFcnJvciIsInZlcmlmeVRva2VuRXhwaXJlZEVycm9yIiwicmVjb3Zlck5vdEZvdW5kRXJyb3IiLCJyZWNvdmVyVG9rZW5Xcm9uZ0Vycm9yIiwicmVjb3ZlclRva2VuRXhwaXJlZEVycm9yIiwibm90QWxsb3dlZEVycm9yIiwibm90Rm91bmRFcnJvciIsIm5vdEF1dGhvcml6ZWRFcnJvciJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7QUFJQTs7Ozs7Ozs7QUFFQSxJQUFNQSxjQUFjQyxRQUFRLGVBQVIsQ0FBcEI7O0FBRUFDLE9BQU9DLE9BQVAsR0FBaUIsc0JBQWNBLE9BQWQsRUFBdUIsRUFBdkI7QUFDZjtBQUNBO0FBQ0VDLHFCQUFtQjtBQUFBLFFBQUNDLEdBQUQsdUVBQU8sZ0JBQVA7QUFBQSxXQUE0QkwsWUFBWUssR0FBWixFQUFpQjtBQUM5REMsWUFBTSxtQkFEd0Q7QUFFOURDLGNBQVE7QUFGc0QsS0FBakIsQ0FBNUI7QUFBQSxHQURyQjtBQUtFQyxxQkFBbUI7QUFBQSxRQUFDSCxHQUFELHVFQUFPLGVBQVA7QUFBQSxXQUEyQkwsWUFBWUssR0FBWixFQUFpQjtBQUM3REMsWUFBTSxtQkFEdUQ7QUFFN0RDLGNBQVE7QUFGcUQsS0FBakIsQ0FBM0I7QUFBQTtBQUxyQixDQUZlO0FBWWY7QUFDQTtBQUNFRSxvQkFBa0I7QUFBQSxRQUFDSixHQUFELHVFQUFPLGtCQUFQO0FBQUEsV0FBOEJMLFlBQVlLLEdBQVosRUFBaUI7QUFDL0RDLFlBQU0sa0JBRHlEO0FBRS9EQyxjQUFRO0FBRnVELEtBQWpCLENBQTlCO0FBQUEsR0FEcEI7O0FBTUVHLG1CQUFpQjtBQUFBLFFBQUNMLEdBQUQsdUVBQU8sZUFBUDtBQUFBLFdBQTJCTCxZQUFZSyxHQUFaLEVBQWlCO0FBQzNEQyxZQUFNLFlBRHFEO0FBRTNEQyxjQUFRO0FBRm1ELEtBQWpCLENBQTNCO0FBQUEsR0FObkI7O0FBV0VJLHVCQUFxQjtBQUFBLFFBQUNOLEdBQUQsdUVBQU8saUJBQVA7QUFBQSxXQUE2QkwsWUFBWUssR0FBWixFQUFpQjtBQUNqRUMsWUFBTSxxQkFEMkQ7QUFFakVDLGNBQVE7QUFGeUQsS0FBakIsQ0FBN0I7QUFBQSxHQVh2Qjs7QUFnQkVLLG9CQUFrQjtBQUFBLFFBQUNQLEdBQUQsdUVBQU8sOEJBQVA7QUFBQSxXQUEwQ0wsWUFBWUssR0FBWixFQUFpQjtBQUMzRUMsWUFBTSxrQkFEcUU7QUFFM0VDLGNBQVE7QUFGbUUsS0FBakIsQ0FBMUM7QUFBQTtBQWhCcEIsQ0FiZTtBQWtDZjtBQUNBO0FBQ0VNLHVCQUFxQjtBQUFBLFFBQUNSLEdBQUQsdUVBQU8sb0NBQVA7QUFBQSxXQUFnREwsWUFBWUssR0FBWixFQUFpQjtBQUNwRkMsWUFBTSxxQkFEOEU7QUFFcEZDLGNBQVE7QUFGNEUsS0FBakIsQ0FBaEQ7QUFBQSxHQUR2Qjs7QUFNRU8seUJBQXVCO0FBQUEsUUFBQ1QsR0FBRCx1RUFBTyxnQkFBUDtBQUFBLFdBQTRCTCxZQUFZSyxHQUFaLEVBQWlCO0FBQ2xFQyxZQUFNLHVCQUQ0RDtBQUVsRUMsY0FBUTtBQUYwRCxLQUFqQixDQUE1QjtBQUFBLEdBTnpCOztBQVdFUSwyQkFBeUI7QUFBQSxRQUFDVixHQUFELHVFQUFPLGtCQUFQO0FBQUEsV0FBOEJMLFlBQVlLLEdBQVosRUFBaUI7QUFDdEVDLFlBQU0seUJBRGdFO0FBRXRFQyxjQUFRO0FBRjhELEtBQWpCLENBQTlCO0FBQUE7QUFYM0IsQ0FuQ2U7QUFtRGY7QUFDQTtBQUNFUyx3QkFBc0I7QUFBQSxRQUFDWCxHQUFELHVFQUFPLG9DQUFQO0FBQUEsV0FBZ0RMLFlBQVlLLEdBQVosRUFBaUI7QUFDckZDLFlBQU0sc0JBRCtFO0FBRXJGQyxjQUFRO0FBRjZFLEtBQWpCLENBQWhEO0FBQUEsR0FEeEI7O0FBTUVVLDBCQUF3QjtBQUFBLFFBQUNaLEdBQUQsdUVBQU8sZ0JBQVA7QUFBQSxXQUE0QkwsWUFBWUssR0FBWixFQUFpQjtBQUNuRUMsWUFBTSx3QkFENkQ7QUFFbkVDLGNBQVE7QUFGMkQsS0FBakIsQ0FBNUI7QUFBQSxHQU4xQjs7QUFXRVcsNEJBQTBCO0FBQUEsUUFBQ2IsR0FBRCx1RUFBTyxrQkFBUDtBQUFBLFdBQThCTCxZQUFZSyxHQUFaLEVBQWlCO0FBQ3ZFQyxZQUFNLDBCQURpRTtBQUV2RUMsY0FBUTtBQUYrRCxLQUFqQixDQUE5QjtBQUFBO0FBWDVCLENBcERlO0FBb0VmO0FBQ0E7QUFDRVksbUJBQWlCO0FBQUEsUUFBQ2QsR0FBRCx1RUFBTyxrQkFBUDtBQUFBLFdBQThCTCxZQUFZSyxHQUFaLEVBQWlCO0FBQzlEQyxZQUFNLGlCQUR3RDtBQUU5REMsY0FBUTtBQUZzRCxLQUFqQixDQUE5QjtBQUFBO0FBRG5CLENBckVlO0FBMkVmO0FBQ0E7QUFDRWEsaUJBQWU7QUFBQSxRQUFDZixHQUFELHVFQUFPLFdBQVA7QUFBQSxXQUF1QkwsWUFBWUssR0FBWixFQUFpQjtBQUNyREMsWUFBTSxVQUQrQztBQUVyREMsY0FBUTtBQUY2QyxLQUFqQixDQUF2QjtBQUFBO0FBRGpCLENBNUVlO0FBa0ZmO0FBQ0E7QUFDRWMsc0JBQW9CO0FBQUEsUUFBQ2hCLEdBQUQsdUVBQU8sZ0JBQVA7QUFBQSxXQUE0QkwsWUFBWUssR0FBWixFQUFpQjtBQUMvREMsWUFBTSxlQUR5RDtBQUUvREMsY0FBUTtBQUZ1RCxLQUFqQixDQUE1QjtBQUFBO0FBRHRCLENBbkZlLENBQWpCIiwiZmlsZSI6ImJ1aWxkaW4uanMiLCJzb3VyY2VSb290IjoibGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBCdWlsZGluIGVycm9yIGNyZWF0b3JzXG4gKiBAbW9kdWxlIGJ1aWxkaW5cbiAqL1xuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGFwZW1hbmVycm9yID0gcmVxdWlyZSgnLi9hcGVtYW5lcnJvcicpXG5cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmFzc2lnbihleHBvcnRzLCB7fSxcbiAgLy8gQmFzaWMgZXJyb3JzXG4gIHtcbiAgICB2YWx1ZU1pc3NpbmdFcnJvcjogKG1zZyA9ICdWYWx1ZSByZXF1aXJlZCcpID0+IGFwZW1hbmVycm9yKG1zZywge1xuICAgICAgbmFtZTogJ1ZhbHVlTWlzc2luZ0Vycm9yJyxcbiAgICAgIHN0YXR1czogNDAwXG4gICAgfSksXG4gICAgdmFsdWVJbnZhbGlkRXJyb3I6IChtc2cgPSAnVmFsdWUgaW52YWxpZCcpID0+IGFwZW1hbmVycm9yKG1zZywge1xuICAgICAgbmFtZTogJ3ZhbHVlSW52YWxpZEVycm9yJyxcbiAgICAgIHN0YXR1czogNDAwXG4gICAgfSlcbiAgfSxcbiAgLy8gU2lnbiBlcnJvcnNcbiAge1xuICAgIHNpZ251cFByb3ZlRXJyb3I6IChtc2cgPSAnUHJvdmlzaW9uIEZhaWxlZCcpID0+IGFwZW1hbmVycm9yKG1zZywge1xuICAgICAgbmFtZTogJ1NpZ251cFByb3ZlRXJyb3InLFxuICAgICAgc3RhdHVzOiA0MDBcbiAgICB9KSxcblxuICAgIHNpZ25pbkZhaWxFcnJvcjogKG1zZyA9ICdTaWduaW4gRmFpbGVkJykgPT4gYXBlbWFuZXJyb3IobXNnLCB7XG4gICAgICBuYW1lOiAnU2lnbmluRmFpbCcsXG4gICAgICBzdGF0dXM6IDQwMFxuICAgIH0pLFxuXG4gICAgc2lnbmluUmVxdWlyZWRFcnJvcjogKG1zZyA9ICdTaWduaW4gcmVxdWlyZWQnKSA9PiBhcGVtYW5lcnJvcihtc2csIHtcbiAgICAgIG5hbWU6ICdTaWduaW5SZXF1aXJlZEVycm9yJyxcbiAgICAgIHN0YXR1czogNDAxXG4gICAgfSksXG5cbiAgICBzaWduSW52YWxpZEVycm9yOiAobXNnID0gJ1VzZXIgbm90IHJlZ2lzdGVyZWQgZm9yIHNpZ24nKSA9PiBhcGVtYW5lcnJvcihtc2csIHtcbiAgICAgIG5hbWU6ICdTaWduSW52YWxpZEVycm9yJyxcbiAgICAgIHN0YXR1czogNDAzXG4gICAgfSlcbiAgfSxcbiAgLy8gVmVyaWZ5IGVycm9yc1xuICB7XG4gICAgdmVyaWZ5Tm90Rm91bmRFcnJvcjogKG1zZyA9ICdVc2VyIG5vdCBmb3VuZCBmb3IgdGhlIGdpdmVuIGVtYWlsJykgPT4gYXBlbWFuZXJyb3IobXNnLCB7XG4gICAgICBuYW1lOiAnVmVyaWZ5Tm90Rm91bmRFcnJvcicsXG4gICAgICBzdGF0dXM6IDQwMFxuICAgIH0pLFxuXG4gICAgdmVyaWZ5VG9rZW5Xcm9uZ0Vycm9yOiAobXNnID0gJ1Rva2VuIGlzIHdyb25nJykgPT4gYXBlbWFuZXJyb3IobXNnLCB7XG4gICAgICBuYW1lOiAnVmVyaWZ5VG9rZW5Xcm9uZ0Vycm9yJyxcbiAgICAgIHN0YXR1czogNDAwXG4gICAgfSksXG5cbiAgICB2ZXJpZnlUb2tlbkV4cGlyZWRFcnJvcjogKG1zZyA9ICdUb2tlbiBpcyBleHBpcmVkJykgPT4gYXBlbWFuZXJyb3IobXNnLCB7XG4gICAgICBuYW1lOiAnVmVyaWZ5VG9rZW5FeHBpcmVkRXJyb3InLFxuICAgICAgc3RhdHVzOiA0MDBcbiAgICB9KVxuICB9LFxuICAvLyBSZWNvdmVyIGVycm9yc1xuICB7XG4gICAgcmVjb3Zlck5vdEZvdW5kRXJyb3I6IChtc2cgPSAnVXNlciBub3QgZm91bmQgZm9yIHRoZSBnaXZlbiBlbWFpbCcpID0+IGFwZW1hbmVycm9yKG1zZywge1xuICAgICAgbmFtZTogJ1JlY292ZXJOb3RGb3VuZEVycm9yJyxcbiAgICAgIHN0YXR1czogNDAwXG4gICAgfSksXG5cbiAgICByZWNvdmVyVG9rZW5Xcm9uZ0Vycm9yOiAobXNnID0gJ1Rva2VuIGlzIHdyb25nJykgPT4gYXBlbWFuZXJyb3IobXNnLCB7XG4gICAgICBuYW1lOiAnUmVjb3ZlclRva2VuV3JvbmdFcnJvcicsXG4gICAgICBzdGF0dXM6IDQwMFxuICAgIH0pLFxuXG4gICAgcmVjb3ZlclRva2VuRXhwaXJlZEVycm9yOiAobXNnID0gJ1Rva2VuIGlzIGV4cGlyZWQnKSA9PiBhcGVtYW5lcnJvcihtc2csIHtcbiAgICAgIG5hbWU6ICdSZWNvdmVyVG9rZW5FeHBpcmVkRXJyb3InLFxuICAgICAgc3RhdHVzOiA0MDBcbiAgICB9KVxuICB9LFxuICAvLyBBdXRoIGVycm9yc1xuICB7XG4gICAgbm90QWxsb3dlZEVycm9yOiAobXNnID0gJ05vdCBhbGxvd2VkIGhlcmUnKSA9PiBhcGVtYW5lcnJvcihtc2csIHtcbiAgICAgIG5hbWU6ICdOb3RBbGxvd2VkRXJyb3InLFxuICAgICAgc3RhdHVzOiA0MDNcbiAgICB9KVxuICB9LFxuICAvLyBSZXNvdXJjZSBlcnJvcnNcbiAge1xuICAgIG5vdEZvdW5kRXJyb3I6IChtc2cgPSAnTm90IGZvdW5kJykgPT4gYXBlbWFuZXJyb3IobXNnLCB7XG4gICAgICBuYW1lOiAnTm90Rm91bmQnLFxuICAgICAgc3RhdHVzOiA0MDRcbiAgICB9KVxuICB9LFxuICAvLyBBdXRob3JpemUgZXJyb3JzXG4gIHtcbiAgICBub3RBdXRob3JpemVkRXJyb3I6IChtc2cgPSAnTm90IGF1dGhyb2l6ZWQnKSA9PiBhcGVtYW5lcnJvcihtc2csIHtcbiAgICAgIG5hbWU6ICdOb3RBdXRob3JpemVkJyxcbiAgICAgIHN0YXR1czogNDAyXG4gICAgfSlcbiAgfVxuKVxuIl19