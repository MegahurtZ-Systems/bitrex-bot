/**
 * Test case for define.
 * Runs with mocha.
 */
'use strict'

const define = require('../lib/define.js')
const asleep = require('asleep')
const assert = require('assert')
const fs = require('fs')
const co = require('co')
const { moduleProxy } = require('apemanmock')
const apemandb = require('apemandb')
const apemanmodel = require('apemanmodel')
const { SAMPLE_DEFS_DIR } = apemanmodel.paths

describe('define', function () {
  this.timeout(3000)
  let tmpDir = `${__dirname}/../tmp`
  let dbFile = `${tmpDir}/testing-db.db`
  let db, Session, User, UserSign

  before(() => co(function * () {
    db = apemandb({
      env: {
        DATABASE: 'testing-database01',
        USERNAME: 'foo',
        PASSWORD: 'bar',
        DIALECT: 'sqlite',
        STORAGE: dbFile
      },
      models: `${SAMPLE_DEFS_DIR}/*.json`
    })
    Session = db.model('Session')
    User = db.model('User')
    UserSign = db.model('UserSign')
    yield db.sync({ force: true })
  }))

  after(() => co(function * () {
    yield asleep(10) // Wait for flush.
    fs.unlinkSync(dbFile)
  }))

  it('Use sign methods', () => co(function * () {
    let module = define(User, UserSign, { logging: false })
    let sign = moduleProxy(module, { ctx: { state: {}, session: {} } })
    {
      let pong = yield sign.ping('The pong!')
      assert.equal(pong, 'The pong!')
    }

    {
      let signed = yield sign.signup('foo', 'foo@example.com', 'foo1234')
      assert.equal(signed.key, 'foo')
      assert.equal(signed.email, 'foo@example.com')
      assert.ok(signed.sign.hash)
      yield sign.signout()
    }
    {
      let signed = yield sign.signin('foo', 'foo1234')
      assert.equal(signed.key, 'foo')
      assert.equal(signed.email, 'foo@example.com')

      assert.ok(yield sign.check('foo1234'))
      assert.ok(!(yield sign.check('__invalid_password')))
    }
    {
      let caught
      try {
        yield sign.signin('foo', '__invalid_password__')
      } catch (e) {
        caught = e
      }
      assert.ok(caught)
    }

    {
      let signed = yield sign.signmod({ key: 'hoge' }, 'hoge123456')
      assert.equal(signed.key, 'hoge')
      assert.equal(signed.email, 'foo@example.com')
    }
    {
      let signed = yield sign.signmod({ key: 'fuge' })
      assert.equal(signed.sign.key, 'fuge')
    }

    yield sign.signin('fuge', 'hoge123456')
    yield sign.signout()
    yield sign.signin('fuge', 'hoge123456')

    yield sign.signdel()
  }))

  it('Compare spec and implement', () => co(function * () {
    let module = define(User, UserSign, { logging: false })

    let implNames = Object.keys(module).filter((name) => !/^\$/.test(name))
    let specNames = Object.keys(module.$spec)
    for (let implName of implNames) {
      assert.ok(!!~specNames.indexOf(implName), `${implName} is implemented, but not described in "$spec"`)
    }
    for (let specName of specNames) {
      assert.ok(!!~implNames.indexOf(specName), `${specName} is described in "$spec", but not implemented`)
    }
  }))
})

/* global describe, before, after, it */
