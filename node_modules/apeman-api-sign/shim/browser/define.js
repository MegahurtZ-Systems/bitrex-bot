/**
 * Define api of apeman-api-sign
 * @function define
 * @param {Object} User - User model
 * @param {Object} UserSign - User sign model
 * @param {Object} [options] - Optional settings
 * @param {boolean} [options.logging] - Enable logger
 * @param {string} [options.passwordSpec] - Spec of password
 * @returns {Object} - API configuration
 */
'use strict';

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var co = require('co');
var assert = require('assert');
var schemas = require('./schemas');
var passwordDigest = require('./digesting/password_digest');
var aslogger = require('aslogger');

var _require = require('apemanerror/buildin'),
    signupProveError = _require.signupProveError,
    signinFailError = _require.signinFailError,
    signinRequiredError = _require.signinRequiredError,
    signInvalidError = _require.signInvalidError;

var spec = require('./spec');

/** @lends api */
function define(User, UserSign) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  assert.ok(User, 'User is required.');
  assert.ok(UserSign, 'UserSign is required.');
  assert.ok(!!(User.$$inherited && User.$$inherited.ApUser), 'UserSign should inherit ApUserSign.');
  assert.ok(!!(UserSign.$$inherited && UserSign.$$inherited.ApUserSign), 'UserSign should inherit ApUserSign.');

  var logger = aslogger({ disabled: !options.logging });
  var digest = passwordDigest(options.passwordSpec);
  var _options$prove = options.prove,
      prove = _options$prove === undefined ? function () {
    return true;
  } : _options$prove;


  var validate = function validate(schemaName, values) {
    return schemas(schemaName).validateToThrow(values, {
      assign: { status: 400 }
    });
  };

  return {
    /**
     * Test the reachability of the api.
     * @method ping
     * @param {string} [pong='pong'] - Pong message to return
     * @returns {string} - Pong message
     */
    ping: function ping(pong) {
      return co(_regenerator2.default.mark(function _callee() {
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                return _context.abrupt('return', pong || 'pong');

              case 1:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    },


    /**
     * @method signup
     * @param {string} key - User key to signup
     * @param {string} email - User email to signup
     * @param {string} password - User password to signup
     * @param {Object} [options={}] - Optional settings
     * @returns {Promise}
     */
    signup: function signup(key, email, password) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      var s = this;
      var provision = options.provision,
          _options$userAttr = options.userAttr,
          userAttr = _options$userAttr === undefined ? {} : _options$userAttr;

      return co(_regenerator2.default.mark(function _callee2() {
        var proved, user, hashSalt, hash, signs, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _step$value, kind, _key;

        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                validate('signup', { key: key, email: email, password: password });
                _context2.next = 3;
                return _promise2.default.resolve(prove(provision));

              case 3:
                proved = _context2.sent;

                if (proved) {
                  _context2.next = 6;
                  break;
                }

                throw signupProveError();

              case 6:
                _context2.next = 8;
                return User.create((0, _assign2.default)({ key: key, email: email }, userAttr));

              case 8:
                user = _context2.sent;
                hashSalt = digest.newSalt();
                _context2.next = 12;
                return digest(password, hashSalt);

              case 12:
                hash = _context2.sent;
                signs = [{ kind: 'key', key: key }, { kind: 'email', key: email }].filter(function (sign) {
                  return !!sign.key;
                });
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context2.prev = 17;
                _iterator = (0, _getIterator3.default)(signs);

              case 19:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context2.next = 26;
                  break;
                }

                _step$value = _step.value, kind = _step$value.kind, _key = _step$value.key;
                _context2.next = 23;
                return UserSign.create({
                  kind: kind,
                  key: _key,
                  hash: hash,
                  hashSalt: hashSalt,
                  signupAt: new Date(),
                  userId: user.id
                });

              case 23:
                _iteratorNormalCompletion = true;
                _context2.next = 19;
                break;

              case 26:
                _context2.next = 32;
                break;

              case 28:
                _context2.prev = 28;
                _context2.t0 = _context2['catch'](17);
                _didIteratorError = true;
                _iteratorError = _context2.t0;

              case 32:
                _context2.prev = 32;
                _context2.prev = 33;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 35:
                _context2.prev = 35;

                if (!_didIteratorError) {
                  _context2.next = 38;
                  break;
                }

                throw _iteratorError;

              case 38:
                return _context2.finish(35);

              case 39:
                return _context2.finish(32);

              case 40:
                return _context2.abrupt('return', s.signin(key, password));

              case 41:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[17, 28, 32, 40], [33,, 35, 39]]);
      }));
    },


    /**
     * Do sign in
     * @method signin
     * @param {string} key - User key or email to signup
     * @param {string} password - User password
     * @returns {Promise}
     */
    signin: function signin(key, password) {
      var s = this;
      var session = s.session;

      return co(_regenerator2.default.mark(function _callee3() {
        var userSign, hash, valid, user;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                validate('signin', { key: key, password: password });
                _context3.next = 3;
                return UserSign.findOne({
                  where: { key: key },
                  include: [UserSign.getRef('user')]
                });

              case 3:
                userSign = _context3.sent;

                if (userSign) {
                  _context3.next = 6;
                  break;
                }

                throw signinFailError();

              case 6:
                _context3.next = 8;
                return digest(password, userSign.hashSalt);

              case 8:
                hash = _context3.sent;
                valid = hash === userSign.hash;

                if (valid) {
                  _context3.next = 12;
                  break;
                }

                throw signinFailError();

              case 12:
                user = userSign.user;

                if (user) {
                  _context3.next = 15;
                  break;
                }

                throw signInvalidError();

              case 15:
                session.signed = define.formatSigned(user, userSign);
                _context3.next = 18;
                return s.signget();

              case 18:
                return _context3.abrupt('return', _context3.sent);

              case 19:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
    },


    /**
     * Get signing data
     * @method signget
     * @returns {Promise}
     */
    signget: function signget() {
      var s = this;
      var session = s.session;
      var signed = session.signed;

      return co(_regenerator2.default.mark(function _callee4() {
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                return _context4.abrupt('return', signed);

              case 1:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
    },


    /**
     * Modify sign data
     * @method signmod
     * @param {object} keys - Sign keys to update
     * @param {string} [password] - Password to update
     * @returns {Promise}
     */
    signmod: function signmod(keys, password) {
      var s = this;
      var session = s.session;
      var signed = session.signed;

      if (!signed) {
        throw signinRequiredError();
      }
      var userId = signed.id;
      return co(_regenerator2.default.mark(function _callee5() {
        var user, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _kind, _value, userSign, patch, changed, kind, value;

        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return User.findById(userId);

              case 2:
                user = _context5.sent;
                _iteratorNormalCompletion2 = true;
                _didIteratorError2 = false;
                _iteratorError2 = undefined;
                _context5.prev = 6;
                _iterator2 = (0, _getIterator3.default)((0, _keys2.default)(keys));

              case 8:
                if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
                  _context5.next = 30;
                  break;
                }

                _kind = _step2.value;
                _value = keys[_kind];
                _context5.next = 13;
                return UserSign.findOne({
                  where: { kind: _kind, userId: userId }
                });

              case 13:
                userSign = _context5.sent;
                patch = { key: keys[_kind] };

                if (!password) {
                  _context5.next = 19;
                  break;
                }

                _context5.next = 18;
                return digest(password, userSign.hashSalt);

              case 18:
                patch.hash = _context5.sent;

              case 19:
                changed = user[_kind] !== _value;

                if (!changed) {
                  _context5.next = 23;
                  break;
                }

                _context5.next = 23;
                return user.update((0, _defineProperty3.default)({}, _kind, _value));

              case 23:
                _context5.next = 25;
                return userSign.update(patch);

              case 25:
                userSign = _context5.sent;

                if (signed.sign.kind === _kind) {
                  signed.sign = userSign;
                }

              case 27:
                _iteratorNormalCompletion2 = true;
                _context5.next = 8;
                break;

              case 30:
                _context5.next = 36;
                break;

              case 32:
                _context5.prev = 32;
                _context5.t0 = _context5['catch'](6);
                _didIteratorError2 = true;
                _iteratorError2 = _context5.t0;

              case 36:
                _context5.prev = 36;
                _context5.prev = 37;

                if (!_iteratorNormalCompletion2 && _iterator2.return) {
                  _iterator2.return();
                }

              case 39:
                _context5.prev = 39;

                if (!_didIteratorError2) {
                  _context5.next = 42;
                  break;
                }

                throw _iteratorError2;

              case 42:
                return _context5.finish(39);

              case 43:
                return _context5.finish(36);

              case 44:
                if (!password) {
                  _context5.next = 52;
                  break;
                }

                kind = signed.sign.kind;
                value = keys[kind];
                _context5.next = 49;
                return s.signin(value, password);

              case 49:
                return _context5.abrupt('return', _context5.sent);

              case 52:
                _context5.next = 54;
                return s.signget();

              case 54:
                return _context5.abrupt('return', _context5.sent);

              case 55:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this, [[6, 32, 36, 44], [37,, 39, 43]]);
      }));
    },


    /**
     * Do signout
     * @method signout
     * @returns {Promise}
     */
    signout: function signout() {
      var s = this;
      var session = s.session;

      return co(_regenerator2.default.mark(function _callee6() {
        var _session$signed, signed, sign, userSign;

        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                _session$signed = session.signed, signed = _session$signed === undefined ? {} : _session$signed;

                delete session.signed;
                sign = signed.sign;

                if (sign) {
                  _context6.next = 5;
                  break;
                }

                return _context6.abrupt('return');

              case 5:
                _context6.next = 7;
                return UserSign.findById(sign.id);

              case 7:
                userSign = _context6.sent;

                if (userSign) {
                  _context6.next = 10;
                  break;
                }

                return _context6.abrupt('return', null);

              case 10:
                _context6.next = 12;
                return userSign.update({
                  signoutAt: new Date()
                });

              case 12:
                return _context6.abrupt('return', signed);

              case 13:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));
    },


    /**
     * Delete sign data
     * @method signdel
     * @returns {Promise}
     */
    signdel: function signdel() {
      var s = this;
      var session = s.session;
      var signed = session.signed;

      var hasSign = signed && signed.hasOwnProperty('id');
      if (!hasSign) {
        throw signinRequiredError();
      }
      var userId = signed.id;

      return co(_regenerator2.default.mark(function _callee7() {
        var userSigns, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, userSign, user;

        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return UserSign.findAll({
                  where: { userId: userId }
                });

              case 2:
                userSigns = _context7.sent;
                _iteratorNormalCompletion3 = true;
                _didIteratorError3 = false;
                _iteratorError3 = undefined;
                _context7.prev = 6;
                _iterator3 = (0, _getIterator3.default)(userSigns);

              case 8:
                if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {
                  _context7.next = 15;
                  break;
                }

                userSign = _step3.value;
                _context7.next = 12;
                return userSign.destroy();

              case 12:
                _iteratorNormalCompletion3 = true;
                _context7.next = 8;
                break;

              case 15:
                _context7.next = 21;
                break;

              case 17:
                _context7.prev = 17;
                _context7.t0 = _context7['catch'](6);
                _didIteratorError3 = true;
                _iteratorError3 = _context7.t0;

              case 21:
                _context7.prev = 21;
                _context7.prev = 22;

                if (!_iteratorNormalCompletion3 && _iterator3.return) {
                  _iterator3.return();
                }

              case 24:
                _context7.prev = 24;

                if (!_didIteratorError3) {
                  _context7.next = 27;
                  break;
                }

                throw _iteratorError3;

              case 27:
                return _context7.finish(24);

              case 28:
                return _context7.finish(21);

              case 29:
                _context7.next = 31;
                return User.findById(userId);

              case 31:
                user = _context7.sent;
                _context7.next = 34;
                return user.destroy();

              case 34:
                return _context7.abrupt('return', s.signout());

              case 35:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this, [[6, 17, 21, 29], [22,, 24, 28]]);
      }));
    },


    /**
     * Check password is valid
     * @method check
     * @param {string} password
     * @returns {Promise}
     */
    check: function check(password) {
      var s = this;
      var session = s.session;

      return co(_regenerator2.default.mark(function _callee8() {
        var signed, hasSign, sign, hash;
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                signed = session.signed;
                hasSign = signed && signed.hasOwnProperty('id');

                if (hasSign) {
                  _context8.next = 4;
                  break;
                }

                throw signinRequiredError();

              case 4:
                sign = signed.sign;
                _context8.next = 7;
                return digest(password, sign.hashSalt);

              case 7:
                hash = _context8.sent;
                return _context8.abrupt('return', hash === sign.hash);

              case 9:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));
    },


    /**
     * A hook which runs before method invoked
     * @param {string} methodName - Name of method to invoke
     * @param {Array} params - Prams for invocation
     * @returns {Promise}
     */
    $before: function $before(methodName, params) {
      var s = this;
      var session = s.session;

      if (!session) {
        throw new Error('Session not found. You need to add apeman-middleware-session to $middlewares.');
      }

      var state = s.state;

      return co(_regenerator2.default.mark(function _callee9() {
        return _regenerator2.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                state.invokedAt = new Date();
                logger.info(methodName + ' started...');

              case 2:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));
    },

    /**
     * A hook which runs after method invoked
     * @param {string} methodName - Name of method to invoke
     * @param {Array} params - Prams for invocation
     * @param {?*} returns - Return values
     * @returns {Promise}
     */
    $after: function $after(methodName, params, returns) {
      var s = this;
      var state = s.state;

      return co(_regenerator2.default.mark(function _callee10() {
        var took;
        return _regenerator2.default.wrap(function _callee10$(_context10) {
          while (1) {
            switch (_context10.prev = _context10.next) {
              case 0:
                took = new Date() - state.invokedAt;

                logger.info('...' + methodName + ' done! (' + took + 'ms)');

              case 2:
              case 'end':
                return _context10.stop();
            }
          }
        }, _callee10, this);
      }));
    },

    /**
     * Method specifications
     */
    $spec: spec
  };
}

(0, _assign2.default)(define, {
  formatSigned: function formatSigned(user, userSign) {
    var sign = userSign.toJSON();
    delete sign.user;
    return (0, _assign2.default)({}, user.toJSON(), { sign: sign });
  }
});

module.exports = define;
//# sourceMappingURL=data:application/json;base64,